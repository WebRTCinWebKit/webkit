/*
 * Copyright (C) 2012 Google Inc. All rights reserved.
 * Copyright (C) 2013 Nokia Corporation and/or its subsidiary(-ies).
 * Copyright (C) 2015 Ericsson AB. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer
 *    in the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name of Google Inc. nor the names of its contributors
 *    may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

[
    Conditional=MEDIA_STREAM,
    ActiveDOMObject,
    CustomConstructor(Dictionary rtcConfiguration),
    ConstructorCallWith=ScriptExecutionContext,
    ConstructorRaisesException,
    EventTarget,
    InterfaceName=webkitRTCPeerConnection,
] interface RTCPeerConnection {

    [Custom, RaisesException] Promise createOffer(optional Dictionary offerOptions);
    [Custom, RaisesException] Promise createAnswer(optional Dictionary answerOptions);

    sequence<RTCRtpSender> getSenders();

    [StrictTypeChecking, RaisesException] RTCRtpSender addTrack(MediaStreamTrack track, MediaStream stream);
    [StrictTypeChecking, RaisesException] void removeTrack(RTCRtpSender sender);

    [Custom, RaisesException] Promise setLocalDescription(RTCSessionDescription description);
    readonly attribute RTCSessionDescription localDescription;

    [Custom, RaisesException] Promise setRemoteDescription(RTCSessionDescription description);
    readonly attribute RTCSessionDescription remoteDescription;

    readonly attribute DOMString signalingState;

    [RaisesException] void updateIce(Dictionary configuration);
    [Custom, RaisesException] Promise addIceCandidate(RTCIceCandidate candidate);

    readonly attribute DOMString iceGatheringState;
    readonly attribute DOMString iceConnectionState;

    RTCConfiguration getConfiguration();

    void getStats(RTCStatsCallback successCallback, RTCPeerConnectionErrorCallback failureCallback, [Default=Undefined] optional MediaStreamTrack selector);

    [Custom, RaisesException] RTCDataChannel createDataChannel([TreatNullAs=NullString, TreatUndefinedAs=NullString] DOMString label, optional Dictionary options);

    void close();

    attribute EventHandler onnegotiationneeded;
    attribute EventHandler onicecandidate;
    attribute EventHandler onsignalingstatechange;
    attribute EventHandler ontrack;
    attribute EventHandler oniceconnectionstatechange;
    attribute EventHandler ondatachannel;

    // EventTarget interface
    void addEventListener(DOMString type, EventListener listener, optional boolean useCapture);
    void removeEventListener(DOMString type, EventListener listener, optional boolean useCapture);
    [RaisesException] boolean dispatchEvent(Event event);
};

